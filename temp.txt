import React, { useState } from "react";
import "../styles/Meet.css";
import Signal from "../apis/SignallingApi";

const Meet = () => {
  const [offer, setOffer] = useState(null);
  const [answer, setAnswer] = useState(null);
  const master = new RTCPeerConnection();
  const dataChannel = master.createDataChannel("channel");

  function joinMeeting() {
    alert("join is clicked");
  }

  function startMeeting() {
    alert("start is clicked");
    // Call the function to initiate the process
    createOfferAndConnect()
      .then((lastIceCandidate) => {
        console.log("Connection established successfully!");
        console.log("Last ICE candidate:", lastIceCandidate);
        setTimeout(() => {
          console.log("timer off...")
          dataChannel.onopen = (e) => {
            console.log("Connection opened!");
            sendMessage("Hello from the master!", dataChannel);
          };
          dataChannel.send("checking data channel.....");
        }, 10000);
        console.log("timer on...")
        
      })
      .catch((error) => console.error("Error in connection:", error));
  }

  function createOfferAndConnect() {
    return new Promise((resolve, reject) => {
      dataChannel.onmessage = (e) =>
        console.log("Just got a message: " + e.data);

      dataChannel.onopen = (e) => {
        console.log("Connection opened!");
        sendMessage("Hello from the master!", dataChannel);
      };

      // Array to store ICE candidates
      const iceCandidates = [];

      // Event listener for ICE candidates
      master.onicecandidate = async (e) => {
        if (e.candidate) {
          iceCandidates.push(e.candidate);
          console.log(
            "New Ice Candidate! Printing SDP",
            JSON.stringify(master.localDescription)
          );
        } else {
          const finalICECandidate = JSON.stringify(master.localDescription);
          console.log("Final ICE candidate is gathered", finalICECandidate);

          const response = await Signal.saveOffer(finalICECandidate);
          const sessionStorageId = response.data;
          console.log("sessionStorageId: ", sessionStorageId);

          // const answer = await Signal.getAnswer(sessionStorageId);
          alert("Now wait for answer");

          const answer = {"type":"offer","sdp":"v=0\r\no=- 3661524322330617293 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=extmap-allow-mixed\r\na=msid-semantic: WMS\r\nm=application 54799 UDP/DTLS/SCTP webrtc-datachannel\r\nc=IN IP4 192.168.56.1\r\na=candidate:3792870538 1 udp 2122260223 192.168.56.1 54799 typ host generation 0 network-id 1\r\na=candidate:2799638539 1 udp 2122194687 192.168.36.110 54800 typ host generation 0 network-id 2 network-cost 10\r\na=candidate:481839134 1 tcp 1518280447 192.168.56.1 9 typ host tcptype active generation 0 network-id 1\r\na=candidate:1484115103 1 tcp 1518214911 192.168.36.110 9 typ host tcptype active generation 0 network-id 2 network-cost 10\r\na=ice-ufrag:72s3\r\na=ice-pwd:i2MSBX5p5PV8RhWQAdtG8uA/\r\na=ice-options:trickle\r\na=fingerprint:sha-256 D9:FB:90:B1:0A:8E:F1:42:E6:C4:08:2C:30:C3:52:A2:02:EC:33:CC:05:DD:CF:31:01:66:9F:30:7F:A1:4F:B2\r\na=setup:actpass\r\na=mid:0\r\na=sctp-port:5000\r\na=max-message-size:262144\r\n"};
          console.log("answer ", answer);

          // const receivedAnswer = JSON.parse(answer);
          console.log("answer received is:", answer);
          alert("answer received is: ", answer);

          // Set the received answer as the remote description
          master.setRemoteDescription(answer).then(() => {

              console.log("Remote description set successfully!");
              resolve(iceCandidates[iceCandidates.length - 1]); // Resolve the promise with the last ICE candidate

            })
            .catch((error) => {

              console.error("Error setting remote description:", error);
              reject(error);

            });
        }
      };

      // Create and set local description (offer)
      master
        .createOffer()
        .then((offer) => master.setLocalDescription(offer))
        .then(() => {
          console.log("Offer created and local description set!");
        })
        .catch((error) => {
          console.error("Error in creating or setting offer:", error);
        });
    });
  }

  // Function to send a message if the data channel is open
  function sendMessage(message, channel) {
    if (channel.readyState === "open") {
      channel.send(message);
      console.log("Message sent: " + message);
    } else {
      console.error("Data channel is not open. Message not sent.");
    }
  }

  return (
    <div className="meet-container">
      <div className="left-container">
        <div className="meeting-btn">
          <button className="blank-button" onClick={startMeeting}>
            <span className="plus-sign">+ </span>Start Meeting
          </button>
          <button className="filled-button" onClick={joinMeeting}>
            Join Meeting
          </button>
        </div>
      </div>
      <div className="right-container"></div>
    </div>
  );
};

export default Meet;






























import React, { useState } from "react";
import "../styles/Meet.css";
import Signal from "../apis/SignallingApi";

const Meet = () => {
  const [offer, setOffer] = useState(null);
  const [answer, setAnswer] = useState(null);
  const [meetID, setMeetID] = useState(null);
  let lastSDP = null;
  let lastAnswerSDP = null;

  async function startMeeting() {
    const sunflower = new RTCPeerConnection();
    const dataChannel = sunflower.createDataChannel("channel");

    dataChannel.onmessage = (e) => console.log("Just got a message: " + e.data);

    dataChannel.onopen = async (e) => {
      console.log("Data channel opened!");
      console.log("Message sender is ready...");

      // this prompt used below blocks onmessage fucntion

      async function sendMessage() {
        const messageToSend = prompt("Enter a message to send or type 'quit'");
        if (messageToSend !== "quit" && dataChannel.readyState === "open") {
          dataChannel.send(messageToSend);
          await sendMessage();
        } else {
          console.log('Data channel is closed or "quit" command entered.');
        }
      }

      // Start the asynchronous loop
      await sendMessage();
    };

    sunflower.onicecandidate = async (e) => {
      if (e.candidate) {
        const newOffer = JSON.stringify(sunflower.localDescription);
        console.log("New Ice Candidate! reprinting SDP" + newOffer);
        setOffer(newOffer);
        lastSDP = newOffer;

        console.log("Final SDP:", newOffer);
      } else {
        let currMeetID = null;
        if (lastSDP) {
          currMeetID = await sendFinalSDPOffer(lastSDP);
          console.log("Current Meet ID:", currMeetID);
        }

        const remoteAnswer = prompt("Enter remote answer: ");
        console.log("Remote answer is: ", remoteAnswer);

        await sunflower.setRemoteDescription(JSON.parse(remoteAnswer));
      }
    };

    await sunflower
      .createOffer()
      .then((o) => sunflower.setLocalDescription(o))
      .then((s) => console.log("Set successfully!"));
  }

  async function sendFinalSDPOffer(finalSDP) {
    if (offer) finalSDP = offer;

    console.log("Sending final SDP: ", finalSDP);
    const signalingMessage = await Signal.saveOffer(JSON.parse(finalSDP));

    const localSessionOffer = JSON.parse(signalingMessage.data.offer);
    const sessionID = signalingMessage.data.sessionStorageId;

    console.log("Saved and session storage id is: ", sessionID);
    console.log("Saved and session offer is: ", localSessionOffer);

    return sessionID;
  }

  async function joinMeeting() {
    const inputSessionID = prompt("Enter meet ID: ");
    const sessionStorage = await Signal.getOffer(inputSessionID);

    console.log("Remote offer is: ", sessionStorage);
    const remoteOffer = JSON.parse(sessionStorage.data.offer);
    const sessionID = sessionStorage.data.sessionStorageId;

    const rohit = new RTCPeerConnection();

    rohit.onicecandidate = async (e) => {
      if (e.candidate) {
        const localAnswer = JSON.stringify(rohit.localDescription);
        console.log("New Ice Candidate! Reprinting SDP" + localAnswer);
        setAnswer(localAnswer);
        lastAnswerSDP = localAnswer;

        console.log("Final answer SDP:", localAnswer);
      } else {
        if (lastAnswerSDP) await sendFinalSDPAnswer(lastAnswerSDP);
      }
    };

    await rohit
      .setRemoteDescription(remoteOffer)
      .then((a) => console.log("Offer set"));

    await rohit
      .createAnswer()
      .then((o) => rohit.setLocalDescription(o))
      .then((s) => console.log("Set successfully!"));
  }

  async function sendFinalSDPAnswer(lastAnswerSDP) {
    if (lastAnswerSDP) {
      console.log("Sending final answer SDP: ", lastAnswerSDP);
      const signalingMessage = await Signal.saveAnswer(
        JSON.parse(lastAnswerSDP)
      );

      const localSessionAnswer = JSON.parse(signalingMessage.data.answer);
      const sessionID = signalingMessage.data.sessionStorageId;
      setMeetID(sessionID);

      console.log("Saved and session storage id is: ", sessionID);
      console.log("Saved and session answer is: ", localSessionAnswer);
    }
  }

  return (
    <div className="meet-container">
      <div className="left-container">
        <div className="meeting-btn">
          <button className="blank-button" onClick={startMeeting}>
            <span className="plus-sign">+ </span>Start Meeting
          </button>
          <button className="filled-button" onClick={joinMeeting}>
            Join Meeting
          </button>
        </div>
      </div>
      <div className="right-container"></div>
    </div>
  );
};

export default Meet;
